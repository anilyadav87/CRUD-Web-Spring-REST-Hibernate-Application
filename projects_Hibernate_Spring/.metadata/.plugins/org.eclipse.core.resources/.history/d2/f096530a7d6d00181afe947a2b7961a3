package com.niit.crudhibernatespring.daoimpl;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

import com.niit.crudhibernatespring.config.DBConfig;
import com.niit.crudhibernatespring.dao.UserDAO;
import com.niit.crudhibernatespring.model.User;

public class UserDAOImpl implements UserDAO
{
	private SessionFactory sessionFactory;
	
	Session session = DBConfig.getSession();

	
	public boolean addUser(User user) {
		sessionFactory.getCurrentSession().save(user);
		//session.getTransaction().begin();
		//session.save(user);
		//session.getTransaction().commit();
		return true;
	}

	public User getUserById(int userid) {
		//First Way
		User user = (User) sessionFactory.getCurrentSession().createQuery("from User where userId = "+userid).list().get(0);
		//Other way
		//User user = (User) sessionFactory.getCurrentSession().createQuery("from User where userId = "+userid).uniqueResult();
		
		//User user= (User) session.createQuery("from User where userId = "+ userid).list().get(0);
		return user;
	}

	public List<User> getUserList() {
		
		sessionFactory.getCurrentSession().beginTransaction();
		//session.getTransaction().begin();
		System.out.println("Session is Opened ::"+ sessionFactory.isOpen());
		System.out.println("Session is Connected ::"+sessionFactory.isConnected());
		//annotation is used to suppress compiler warnings for the annotated element.
		@SuppressWarnings("unchecked")
		List<User> getUserList = session.createQuery("from User").list();
		session.getTransaction().commit();
		return getUserList;
	}

	public boolean updateRecord(User user)
	{
		session.getTransaction().begin();
		session.update(user);
		session.getTransaction().commit();	
		return true;
	}

}
